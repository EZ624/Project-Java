package model;

/**
 * This class represents the logic of a game where a board is updated on each
 * step of the game animation. The board can also be updated by selecting a
 * board cell.
 * 
 * @author Department of Computer Science, UMCP
 */

public abstract class Game {
	protected BoardCell[][] board;
	private int maxRows;
	private int maxCols;

	public Game(int maxRows, int maxCols) {
		board = new BoardCell[maxRows][maxCols];
		this.maxRows = maxRows;
		this.maxCols = maxCols;
		for (int row = 0; row < maxRows; row++) {
			for (int col = 0; col < maxCols; col++) {
				board[row][col] = BoardCell.EMPTY;
			}
		}
	}

	public int getMaxRows() {
		return maxRows;
	}

	public int getMaxCols() {
		return maxCols;
	}

	public void setBoardCell(int rowIndex, int colIndex, BoardCell boardCell) {
		if (rowIndex < board.length && colIndex < board[0].length && board != null) {
			board[rowIndex][colIndex] = boardCell;
		}

	}

	public BoardCell getBoardCell(int rowIndex, int colIndex) {
		if (rowIndex < board.length && colIndex < board[0].length) {
			return board[rowIndex][colIndex];
		} else {
			return null;
		}
	}

	public void setRowWithColor(int rowIndex, BoardCell cell) {
		if (rowIndex < maxRows && rowIndex >= 0 && cell != null) {
			for (int col = 0; col < board[rowIndex].length; col++) {
				board[rowIndex][col] = cell;
			}
		}
	}

	public void setColWithColor(int colIndex, BoardCell cell) {
		if (colIndex < maxCols && colIndex >= 0 && cell != null) {
			for (int row = 0; row < board.length; row++) {
				for (int col = 0; col < board[row].length; col++) {
					if (col == colIndex) {
						board[row][col] = cell;
					}
				}
			}
		}
	}

	public void setBoardWithColor(BoardCell cell) {
		if (cell != null) {
			for (int row = 0; row < board.length; row++) {
				for (int col = 0; col < board[row].length; col++) {
					board[row][col] = cell;
				}
			}
		}
	}

	public abstract boolean isGameOver();

	public abstract int getScore();

	/**
	 * Advances the animation one step.
	 */
	public abstract void nextAnimationStep();

	/**
	 * Adjust the board state according to the current board state and the selected
	 * cell.
	 * 
	 * @param rowIndex
	 * @param colIndex
	 */
	public abstract void processCell(int rowIndex, int colIndex);
}
